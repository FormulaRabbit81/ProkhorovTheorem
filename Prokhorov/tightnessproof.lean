import Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
import Mathlib.Tactic.Rify

set_option linter.unusedTactic false
set_option linter.flexible true
open Topology Metric Filter Set ENNReal NNReal MeasureTheory.ProbabilityMeasure TopologicalSpace
namespace MeasureTheory

open scoped Topology ENNReal NNReal BoundedContinuousFunction


variable {X : Type*} [MeasurableSpace X]

lemma ENNreal_ProbMeasure_toMeasure (Œº : ProbabilityMeasure X) (A : Set X) :
    Œº.toMeasure A = ((Œº A) : ENNReal) := by
    exact Eq.symm (ennreal_coeFn_eq_coeFn_toMeasure Œº A)

lemma nnreal_tsum_ge_union {Œº : ProbabilityMeasure X} (f : ‚Ñï ‚Üí Set X)
  (hf : Summable fun n ‚Ü¶ Œº (f n)) :
    Œº (‚ãÉ n, f n) ‚â§ ‚àë' n, Œº (f n) := by
  rw [‚Üê ENNReal.coe_le_coe, ENNReal.coe_tsum hf]
  simpa using measure_iUnion_le (Œº := Œº.toMeasure) f

variable [PseudoMetricSpace X] -- may change this to EMetric later

theorem prob_tendsto_measure_iUnion_accumulate {Œ± Œπ : Type*}
    [Preorder Œπ] [IsCountablyGenerated (atTop : Filter Œπ)]
    {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : Œπ ‚Üí Set Œ±} :
    Tendsto (fun i ‚Ü¶ Œº (Accumulate f i)) atTop (ùìù (Œº (‚ãÉ i, f i))) := by
  refine .of_neBot_imp fun h ‚Ü¶ ?_
  have := (atTop_neBot_iff.1 h).2
  rw [measure_iUnion_eq_iSup_accumulate]
  exact tendsto_atTop_iSup fun i j hij ‚Ü¶ by gcongr

-- Definition taken from R√©my's Repository
def IsTightMeasureSet (S : Set (Measure X)) : Prop :=
  Tendsto (‚®Ü Œº ‚àà S, Œº) (cocompact X).smallSets (ùìù 0)

-- /-- A set of measures `S` is tight if for all `0 < Œµ`, there exists a compact set `K` such that
-- -- for all `Œº ‚àà S`, `Œº K·∂ú ‚â§ Œµ`. By R√©my-/
lemma IsTightMeasureSet_iff_exists_isCompact_measure_compl_le {S : Set (Measure X)}:
    IsTightMeasureSet S‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº (K·∂ú) ‚â§ Œµ := by
  simp only [IsTightMeasureSet, ENNReal.tendsto_nhds ENNReal.zero_ne_top, gt_iff_lt, zero_add,
    iSup_apply, mem_Icc, tsub_le_iff_right, zero_le, iSup_le_iff, true_and, eventually_smallSets,
    mem_cocompact]
  refine ‚ü®fun h Œµ hŒµ ‚Ü¶ ?_, fun h Œµ hŒµ ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®A, ‚ü®K, h1, h2‚ü©, hA‚ü© := h Œµ hŒµ
    exact ‚ü®K, h1, hA K·∂ú h2‚ü©
  ¬∑ obtain ‚ü®K, h1, h2‚ü© := h Œµ hŒµ
    exact ‚ü®K·∂ú, ‚ü®K, h1, subset_rfl‚ü©, fun A hA Œº hŒºS ‚Ü¶ (Œº.mono hA).trans (h2 Œº hŒºS)‚ü©

def TightProb (S : Set (ProbabilityMeasure X)) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ

lemma tightProb_iff_nnreal {S : Set (ProbabilityMeasure X)} :
    TightProb S ‚Üî ‚àÄ Œµ : ‚Ñù‚â•0, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ := by
  simp only [TightProb, forall_ennreal, ENNReal.coe_pos, ENNReal.coe_le_coe, zero_lt_top, le_top,
    implies_true, and_true, forall_const, and_iff_left_iff_imp]
  exact fun _ ‚Ü¶ ‚ü®‚àÖ, isCompact_empty‚ü©

lemma Tightprob_iff_Tight {S : Set (ProbabilityMeasure X)} :
  TightProb S ‚Üî IsTightMeasureSet {((Œº : ProbabilityMeasure X) : Measure X) | Œº ‚àà S} := by
  rw [IsTightMeasureSet_iff_exists_isCompact_measure_compl_le]
  simp [TightProb]

variable [OpensMeasurableSpace X]


lemma meas_compl_thang (Œº : ProbabilityMeasure X) (km : ‚Ñï ‚Üí ‚Ñï) (m:‚Ñï) (D : ‚Ñï ‚Üí X) :
    Œº (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1)))) +
    Œº (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú = 1 := by
  suffices MeasurableSet (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1)))) by
    have := prob_add_prob_compl (Œ± := X) (Œº := Œº) this
    simp only [‚Üê ennreal_coeFn_eq_coeFn_toMeasure] at this
    exact_mod_cast this
  change MeasurableSet (‚ãÉ i ‚àà {i | i ‚â§ km (m + 1)}, _)
  refine Finite.measurableSet_biUnion ?_ ?_
  ¬∑ exact finite_le_nat (km (m + 1))
  ¬∑ intro b hb
    exact measurableSet_closure

variable [SeparableSpace X]
noncomputable section

variable (S : Set (ProbabilityMeasure X))

lemma MeasOpenCoverTendstoMeasUniv (U : ‚Ñï ‚Üí Set X) (O : ‚àÄ i, IsOpen (U i))
    (hcomp: IsCompact (closure S)) (Œµ : ‚Ñù) (heps : Œµ > 0) (Cov : ‚ãÉ i, U i = univ):
    ‚àÉ (k : ‚Ñï), ‚àÄ Œº ‚àà S, Œº (‚ãÉ (i ‚â§ k), U i) > 1 - Œµ := by
  by_contra! nh
  choose Œº hŒºInS hcontradiction using nh
  obtain ‚ü®Œºlim, _, sub, hsubmono, hŒºconverges‚ü© :=
  hcomp.isSeqCompact (fun n => subset_closure <| hŒºInS n)
  have Measurebound n := calc
    (Œºlim (‚ãÉ (i ‚â§ n), U i) : ‚Ñù)
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ n), U i) : ‚Ñù)) atTop := by
      have hopen : IsOpen (‚ãÉ i ‚â§ n, U i) := by
        exact isOpen_biUnion fun i a => O i
      --This is the key lemma
      have := ProbabilityMeasure.le_liminf_measure_open_of_tendsto hŒºconverges hopen
      simp only [Function.comp_apply, ‚Üê ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure,
      ennreal_coeFn_eq_coeFn_toMeasure] at this
      rw [toReal_liminf]
      norm_cast
      simp_rw [‚ÜêProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure] at this
      rw [‚ÜêofNNReal_liminf] at this; norm_cast at this
      use 1
      simp only [ge_iff_le, eventually_map, eventually_atTop, forall_exists_index]
      intro a x h
      specialize h x (by simp); apply h.trans
      exact ProbabilityMeasure.apply_le_one (Œº (sub x)) (‚ãÉ i ‚â§ n, U i)
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ sub k), U i) : ‚Ñù)) atTop := by
      apply Filter.liminf_le_liminf
      ¬∑ simp only [NNReal.coe_le_coe, eventually_atTop, ge_iff_le]
        use n + 1
        intro b hypo
        refine (Œº (sub b)).apply_mono
        <| Set.biUnion_mono (fun i (hi : i ‚â§ n) ‚Ü¶ hi.trans ?_) fun _ _ ‚Ü¶ le_rfl
        apply le_trans (Nat.le_add_right n 1) (le_trans hypo (StrictMono.le_apply hsubmono))
      ¬∑ simp only [autoParam, ge_iff_le, isBoundedUnder_ge_toReal]; use 0; simp
      ¬∑ simp only [autoParam, ge_iff_le, isCoboundedUnder_ge_toReal]
        use 1
        simp only [eventually_map, eventually_atTop, ge_iff_le, forall_exists_index]
        intro a d hyp
        specialize hyp d (by simp)
        apply hyp.trans
        norm_cast
        exact ProbabilityMeasure.apply_le_one (Œº (sub d)) (‚ãÉ i ‚â§ sub d, U i)
    _ ‚â§ 1 - Œµ := by
      apply Filter.liminf_le_of_le
      ¬∑ use 0; simp
      simp only [eventually_atTop, ge_iff_le, forall_exists_index]
      intro b c h
      apply le_trans (h c le_rfl) (hcontradiction _)

  have accumulation : Tendsto (fun n => Œºlim (‚ãÉ i ‚â§ n, U i)) atTop (ùìù (Œºlim (‚ãÉ i, U i))) := by
    simp_rw [‚ÜêSet.accumulate_def]
    exact ProbabilityMeasure.tendsto_measure_iUnion_accumulate
  rw [Cov, coeFn_univ, ‚ÜêNNReal.tendsto_coe] at accumulation
  have exceeds_bound : ‚àÄ·∂† n in atTop, Œºlim (‚ãÉ i ‚â§ n, U i) ‚â• 1 - Œµ / 2 := by
    apply Tendsto.eventually_const_le (v := 1)
    norm_num; positivity
    exact accumulation
  suffices ‚àÄ·∂† n : ‚Ñï in atTop, False by exact this.exists.choose_spec
  filter_upwards [exceeds_bound] with n hn
  have falseity := hn.trans (Measurebound n)
  linarith

/-Kevin Golfed this for me!-/
lemma geom_series : ‚àë' (x : ‚Ñï), ((2:‚Ñù) ^ (x+1))‚Åª¬π = 1 := by
  simp_rw [‚Üê inv_pow, pow_succ, _root_.tsum_mul_right, tsum_geometric_inv_two]
  norm_num

variable [CompleteSpace X]

/-Kevin Golfed this for me!-/
lemma truncated_geom_series (Œµ : ENNReal) : (‚àë' (m : ‚Ñï), Œµ * 2 ^ (-(m+1) : ‚Ñ§)) = Œµ := by
  rw [ENNReal.tsum_mul_left]
  nth_rw 2 [‚Üêmul_one (a :=Œµ)]
  congr
  simp_rw [‚Üê Nat.cast_one (R := ‚Ñ§), ‚Üê Nat.cast_add,
  ENNReal.zpow_neg (x:= 2) (by norm_num) (by norm_num), zpow_natCast,
  ENNReal.inv_pow, ENNReal.tsum_geometric_add_one]
  norm_num; rw [ENNReal.inv_mul_cancel]
  all_goals norm_num

lemma ENNReal.tsum_two_zpow_neg_add_one :
    ‚àë' m : ‚Ñï, 2 ^ (-1 - m  : ‚Ñ§) = (1 : ENNReal) := by
  simp_rw [neg_sub_left, ENNReal.zpow_neg (x:= 2) (by norm_num) (by norm_num),
   ‚Üê Nat.cast_one (R := ‚Ñ§), ‚Üê Nat.cast_add, zpow_natCast, ENNReal.inv_pow,
   ENNReal.tsum_geometric_add_one, one_sub_inv_two, inv_inv]
  exact ENNReal.inv_mul_cancel (by simp) (by simp)

lemma rearrange (m : ‚Ñï) : (2 : NNReal) ^ (-(1 : ‚Ñ§) + (-m : ‚Ñ§)) = 1 / 2 * (1 / 2) ^ m := by
  field_simp
  rw [‚Üê Int.neg_add, zpow_neg]
  refine (inv_mul_eq_one‚ÇÄ ?_).mpr ?_
  ¬∑ refine zpow_ne_zero (1 + m) (by simp)
  ¬∑ refine zpow_one_add‚ÇÄ (by simp) m

omit [OpensMeasurableSpace X] [SeparableSpace X] [CompleteSpace X] in
lemma lt_geom_series (D : ‚Ñï ‚Üí X) (Œµ : ‚Ñù‚â•0) (Œº : ProbabilityMeasure X) (hs : Œº ‚àà S) (km : ‚Ñï ‚Üí ‚Ñï)
  (hbound : ‚àÄ k : ‚Ñï, ‚àÄŒº ‚àà S, ((Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km k), ball (D i) (1 / (‚Üëk + 1)))) : ‚Ñù) >
  1 - ‚ÜëŒµ * (2 ^ k)‚Åª¬π) :
  ‚àë' (m : ‚Ñï), (1 - Œº.toMeasure (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))) ‚â§
  ‚àë' (m : ‚Ñï), (Œµ: ENNReal) * 2 ^ (-((m:‚Ñ§) + 1)) := by
  refine ENNReal.tsum_le_tsum ?_
  intro m
  specialize hbound (m+1) Œº hs
  refine tsub_le_iff_tsub_le.mp ?_
  apply le_of_lt at hbound
  simp only [neg_add_rev, Int.reduceNeg, one_div, tsub_le_iff_right]
  simp only [Nat.cast_add, Nat.cast_one, one_div, tsub_le_iff_right] at hbound
  rw [‚Üê ENNReal.coe_ofNat,‚Üê ENNReal.coe_zpow,‚Üê ENNReal.coe_mul,ENNreal_ProbMeasure_toMeasure,
  ‚Üê ENNReal.coe_add,ENNReal.one_le_coe_iff, ‚Üê NNReal.coe_le_coe]
  ¬∑ apply le_trans hbound
    push_cast
    gcongr
    ¬∑ refine apply_mono Œº ?_
      refine iUnion‚ÇÇ_mono ?_
      intro i hi
      rw [subset_def]
      intro x hx
      rw [EMetric.mem_closure_iff_infEdist_zero]
      refine EMetric.infEdist_zero_of_mem ?_
      rw [mem_ball'] at hx ‚ä¢
      apply hx.trans
      field_simp
      exact (one_div_lt_one_div (by positivity) (by positivity)).mpr (by simp)
    ¬∑ congr!
      rw [‚Üê Int.neg_add, zpow_neg]
      congr!
      norm_cast
      simp only [Nat.ofNat_pos, ne_eq, OfNat.ofNat_ne_one, not_false_eq_true, pow_right_inj‚ÇÄ]
      exact Nat.add_comm m 1
  ¬∑ simp

-- set_option diagnostics true in
theorem IsTight_of_isRelativelyCompact (hcomp : IsCompact (closure S)) :
    TightProb S := by
  rw [tightProb_iff_nnreal]
  by_cases hempty : IsEmpty X
  ¬∑ intro Œµ Œµpos
    use ‚àÖ
    constructor
    ¬∑ exact isCompact_empty
    intro Œº hŒº
    rw [‚Üêuniv_eq_empty_iff] at hempty
    rw [‚Üêhempty]
    simp_all only [univ_eq_empty_iff, compl_univ]
    rw [‚Üê ENNReal.coe_le_coe]
    simp
  simp only [not_isEmpty_iff] at hempty
  intro Œµ Œµpos
  obtain ‚ü®D, hD‚ü© := exists_dense_seq X
  have hcov : ‚àÄ m : ‚Ñï, ‚ãÉ i, ball (D i) (1 / (m+1)) = univ := by
    intro m; rw [denseRange_iff] at hD
    ext p
    exact ‚ü®fun a ‚Ü¶ trivial, fun _ ‚Ü¶ mem_iUnion.mpr <| hD p (1 / (m+1)) Nat.one_div_pos_of_nat‚ü©
  have byclaim : ‚àÄ (m : ‚Ñï), ‚àÉ (k : ‚Ñï),‚àÄ Œº ‚àà S, Œº (‚ãÉ i ‚â§ k, ball (D i) (1 / (m+1))) >
  1 - (Œµ * 2 ^ (-m : ‚Ñ§) : ‚Ñù) := by
    intro m
    let Œµ' :=  (Œµ : ‚Ñù) * 2 ^ (-m : ‚Ñ§)
    exact (MeasOpenCoverTendstoMeasUniv (S := S) (U := fun i => ball (D i) (1 / (m+1)))
    (Œµ := Œµ')) (heps := (by positivity)) (fun _ ‚Ü¶ isOpen_ball) hcomp (hcov m)
  choose! km hbound using id byclaim
  simp_all only [zpow_neg, zpow_natCast]
  let bigK := ‚ãÇ m, ‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1)))
  --This is proven ahead of our calc block as it will need to be called
  --multiple times inside to satisfy tsum's need to show summability
  -- I had to do it inside the actual proof term because this particular
  -- inequality required all our assumptions to be in scope
  have tsumMeasureCompl (Œº : ProbabilityMeasure X) :
  ‚àë' (m : ‚Ñï), Œº.toMeasure (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú =
  ‚àë' (m : ‚Ñï), (1 - Œº.toMeasure (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1))))) := by
    congr! with m
    rw [measure_compl ?_ (by simp)]
    ¬∑ simp
    ¬∑ refine Finite.measurableSet_biUnion ?_ (fun _ _ ‚Ü¶ measurableSet_closure)
      ¬∑ simp only [Nat.le_eq]
        refine BddAbove.finite <| bddAbove_def.mpr ?_
        use km (m + 1) + 1
        intro y
        rw [mem_def]
        omega
  have bigcalc (Œº : ProbabilityMeasure X) (hs : Œº ‚àà S) := calc
    Œº.toMeasure (bigK)·∂ú
    _ = Œº.toMeasure (‚ãÉ m,(‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))·∂ú) := by
      simp only [bigK, compl_iInter, compl_iUnion]
    _ ‚â§ ‚àë' m, Œº.toMeasure ((‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))·∂ú) := by
      apply measure_iUnion_le
    _ = ‚àë' m, (1 - Œº.toMeasure (‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))) := by
      exact tsumMeasureCompl Œº
    _ ‚â§ (‚àë' (m : ‚Ñï), (Œµ : ENNReal) * 2 ^ (-(m+1) : ‚Ñ§)) := by
      exact lt_geom_series S D Œµ Œº hs km hbound
    _ = Œµ := by
      rw [ENNReal.tsum_mul_left]
      nth_rw 2 [‚Üêmul_one (a :=Œµ)]
      push_cast
      congr
      ring_nf
      exact ENNReal.tsum_two_zpow_neg_add_one
  -- Final proof
  use bigK
  constructor
  -- Compactness first
  ¬∑ refine isCompact_of_totallyBounded_isClosed ?_ ?_
    --Totally bounded
    ¬∑ refine Metric.totallyBounded_iff.mpr ?_
      intro Œ¥ Œ¥pos
      -- t should be image under D of the set of numbers less than km of 1/Œ¥.ceil
      refine ‚ü®D '' .Iic (km (‚åäŒ¥‚Åª¬π‚åã‚Çä + 1)), (Set.finite_Iic _).image _, ?_‚ü©
      simp only [one_div, Finset.coe_Icc, mem_image, mem_Icc, zero_le, true_and, iUnion_exists,
        biUnion_and', iUnion_iUnion_eq_right, bigK]
      calc
            ‚ãÇ m, ‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (m + 1)‚Åª¬π)
        _ ‚äÜ ‚ãÉ i ‚â§ km (‚åäŒ¥‚Åª¬π‚åã‚Çä + 1), closure (ball (D i) (‚åäŒ¥‚Åª¬π‚åã‚Çä + 1)‚Åª¬π) := iInter_subset ..
        _ ‚äÜ ‚ãÉ i ‚â§ km (‚åäŒ¥‚Åª¬π‚åã‚Çä + 1), ball (D i) Œ¥ := by
            gcongr
            exact closure_ball_subset_closedBall.trans <| closedBall_subset_ball <|
              inv_lt_of_inv_lt‚ÇÄ Œ¥pos <| Nat.lt_floor_add_one _
    -- Closedness
    ¬∑ simp only [one_div, bigK]
      refine isClosed_iInter ?_
      intro n
      refine Finite.isClosed_biUnion ?_ (fun _ _ ‚Ü¶ isClosed_closure)
      ¬∑ refine Finite.ofFinset (Finset.Iic (km (n+1))) fun x ‚Ü¶ ?_
        ¬∑ simp only [Finset.mem_Iic, Nat.le_eq]
          exact Eq.to_iff rfl
  simp_rw [ENNreal_ProbMeasure_toMeasure, ENNReal.coe_le_coe] at bigcalc
  exact bigcalc


abbrev P := LevyProkhorov.equiv (ProbabilityMeasure X)

abbrev T := P‚Åª¬π' S

lemma Compact_if_tight {S : Set (ProbabilityMeasure X)}
(ht : IsTightMeasureSet {((Œº : ProbabilityMeasure X) : Measure X) | Œº ‚àà S}) :
  IsCompact (closure S) := by
  rw [‚Üê Tightprob_iff_Tight] at ht
  sorry


theorem isTightMeasureSet_iff_isCompact_closure
  {X : Type*} {mX : MeasurableSpace X} [MetricSpace X] [CompleteSpace X]
  [SecondCountableTopology X] [BorelSpace X] {S : Set (ProbabilityMeasure X)} :
    IsTightMeasureSet {((Œº : ProbabilityMeasure X) : Measure X) | Œº ‚àà S}
      ‚Üî IsCompact (closure S) := by
      constructor
      ¬∑ exact fun a ‚Ü¶ Compact_if_tight a
      ¬∑ exact fun a => (Tightprob_iff_Tight.mp (IsTight_of_isRelativelyCompact S a))


end section
end
end MeasureTheory
--#min_imports
--#lint
--#lint unusedHavesSuffices
